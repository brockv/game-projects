<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>icoControl</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize variables.

gameType = "Survival";

menuSelection = -1;
enteringText = false;
msg = "";

resolution = 1;

// Resolution
/*
1 --&gt; 1280 x 720
2 --&gt; 1360 x 768
3 --&gt; 1600 x 900
4 --&gt; 1920 x 1080
*/

currentMenu  = 0;
currentIndex = 0;

// Menu
/*
0 --&gt; Main Menu
1 --&gt; Profile
2 --&gt; Server Options
3 --&gt; Client Options
4 --&gt; Settings
*/

// Main Menu options
menuOption[0, 0] = "Profile";
menuOption[0, 1] = "Create a Server";
menuOption[0, 2] = "Join a Server";
menuOption[0, 3] = "Settings";
menuOption[0, 4] = "Quit";

// Profile Menu options
menuOption[1, 0] = "Change Name:"; text[1, 0] = global.playerName;
menuOption[1, 1] = "Back";         text[1, 1] = "";

// Server Menu options
menuOption[2, 0] = "Server Name:";   text[2, 0] = global.serverName;
menuOption[2, 1] = "Server Port:";   text[2, 1] = string(global.serverPort);
menuOption[2, 2] = "Server IP:";     text[2, 2] = string(global.externalIP);
menuOption[2, 3] = "Create Server";  text[2, 3] = "";
menuOption[2, 4] = "Back";           text[2, 4] = "";

// Client Menu options
menuOption[3, 0] = "Server IP:";        text[3, 0] = global.ip;
menuOption[3, 1] = "Server Port:";      text[3, 1] = string(global.clientPort); 
menuOption[3, 2] = "Connect to Server"; text[3, 2] = "";
menuOption[3, 3] = "Back";              text[3, 3] = "";

// Game Settings options
menuOption[4, 0] = "Resolution";   text[4, 0] = "&lt; " + string(global.displayWidth) + " x " + string(global.displayHeight) + " &gt;";
menuOption[4, 1] = "Back";         text[4, 1] = "";


//
options[0] = 5;
options[1] = 2;
options[2] = 5;
options[3] = 4;
options[4] = 2;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Center the game window


if (!window_get_fullscreen()) {
   window_center();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Menu delay.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Limit menu speed

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control the menu

GetPlayerInput();

/*
var TEXT;
if enteringText = false
   TEXT = "FALSE"
else
    TEXT = "TRUE"
    
show_debug_message(TEXT);
*/

// Move through the menu options
if (alarm[0] &lt;= 0) {
    if (!enteringText) {
        if (kUp) {
           currentIndex--;
           if (currentIndex &lt; 0) {
              currentIndex = options[currentMenu] - 1;
           }
           audio_play_sound(snd_Menu_Change, 0, false);
           alarm[0] = 10;
        }
        
        if (kDown) {
           currentIndex++;
           if (currentIndex &gt; options[currentMenu] - 1) {
              currentIndex = 0;
           }
           audio_play_sound(snd_Menu_Change, 0, false);
           alarm[0] = 10;
        }
        
        if (kLeft) {
           if (currentMenu == 4) {
              if (currentIndex = 0) {
                 PreviousResolution();
              }
           }
        
        }
        
        if (kRight) {
           if (currentMenu == 4) {
              if (currentIndex = 0) {
                 NextResolution();
              }
           }
        }
    }
}

// Confirm selection  
if (kAccept) {

   // Profile Menu
   if (currentMenu == 1) { 
      // Set Player Name
      if (currentIndex == 0) {
         menuSelection = 0;
         global.playerName = msg;
      
        // Save settings to file
        SaveSettings();
      }
   }
   
   // Server Menu
   if (currentMenu == 2) {
      // Set Server Name
      if (currentIndex == 0) {
         menuSelection = 0;
         global.serverName = msg;
         
      // Set Server Type
      /*} else if (currentIndex == 1) {
         switch (global.serverType) {
             case (SURVIVAL):
                 global.serverType = TDM;
                 gameType = "Team Death Match";
                 text[2, 1] = "Team Death Match";
                 
             break;
                 
             case (DM):
                 global.serverType = SURVIVAL;
                 gameType = "Survival";
                 text[2, 1] = "Survival";
                 
             break
             
             case (TDM):
                 global.serverType = DM;
                 gameType = "Death Match";
                 text[2, 1] = "Death Match";
             break;
             
             default:
                 global.serverType = SURVIVAL;
                 text[2, 1] = "Survival";
             break;
         }*/
      // Set Server Port
      } else if (currentIndex == 1) {
         menuSelection = 1;
         global.serverPort = msg
         
         // Save settings to file
         SaveSettings();
      // Set Server IP
      } else if (currentIndex == 2){
         menuSelection = 2;
         global.externalIP = msg
         
         // Save settings to file
         SaveSettings();
      // Create Server
      } else if (currentIndex == 3) {
         global.clientPort = global.serverPort;
         
         // Save settings to file
         SaveSettings();
         // Create the server
         instance_create(0, 0, oServer);
         instance_create(0, 0, oClient);
         instance_destroy();
      }
      
      // Save settings to file
      SaveSettings();
   }
   
   // Client Menu
   if (currentMenu == 3) {
      // IP
      if (currentIndex == 0) {
         menuSelection = 0;
         global.ip = msg;
         
         // Save settings to file
         SaveSettings();
      // Port
      } else if (currentIndex == 1) {
         menuSelection = 1;
         global.clientPort = msg;
         
         // Save settings to file
         SaveSettings();
      // Join Game
      } else if (currentIndex == 2) {
         instance_create(0, 0, oClient);
         instance_destroy();
      }
   }
   
   // Settings menu
   if (currentMenu == 4) {
      if (currentIndex = 0) {
         SetResolution();
         SaveSettings();
         alarm[2] = 10;
      }
   }
   
   // Main Menu
    if (currentMenu == 0 &amp;&amp; alarm[1] &lt;= 0) { 
        // Profile Options
        if (currentIndex == 0) { 
           currentIndex = 0;
           currentMenu = 1
        }
        // Server Options
        if (currentIndex == 1) {
           currentIndex = 0;
           currentMenu = 2
        }
        // Client Options
        if (currentIndex == 2) {
           currentIndex = 0;
           currentMenu = 3
        } 
        // Settings options
        if (currentIndex == 3) {
           currentMenu = 4;
        }
        // Quit
        if (currentIndex == 4) {
           game_end();
        }
        
        alarm[1] = 40;
        currentIndex = 0;
        audio_play_sound(snd_Menu_Select, 0, false);
              
        
    }
    
    // Return to Main Menu
    if (currentMenu != 0) {
      if (currentIndex == options[currentMenu] - 1) {
         currentIndex = 0;
         currentMenu  = 0;
         audio_play_sound(snd_Menu_Select, 0, false);
      }
   }
}















</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Text entering system.

if (currentMenu != 0 &amp;&amp; currentMenu != 4 &amp;&amp; alarm[1] &lt;= 0) {
    if (!enteringText) {
       // Start typing
       if (keyboard_check_pressed(vk_enter)) {
          enteringText = true;
          keyboard_string = "";
          msg = "";
       }
    } else {
       // Place a cap on string length
       if (string_length(keyboard_string) &lt; 25) {
          msg = keyboard_string;
       } else {
          keyboard_string = msg;
       }
       
       // Change value to string
       if (keyboard_check_pressed(vk_enter)) {
          // String set
          if (string_length(msg) &gt; 0) {
              enteringText = false;
              msg = "";
              keyboard_string = "";
          // String was empty
          }
       }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update variables.

gameType = gameType;
//enteringText = enteringText;

// Profile Menu options
text[1, 0] = global.playerName;
text[1, 1] = "";

// Server Menu options
text[2, 0] = global.serverName;
text[2, 1] = string(global.serverPort);
text[2, 2] = string(global.externalIP);
text[2, 3] = "";
text[2, 4] = "";


// Client Menu options
text[3, 0] = global.ip;
text[3, 1] = string(global.clientPort); 
text[3, 2] = "";
text[3, 3] = "";

// Game Settings options
text[4, 0] = "&lt; " + string(global.displayWidth) + " x " + string(global.displayHeight) + " &gt;";
text[4, 1] = "";





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the menus.

if (currentMenu == 0) {
    // Center the menu
    draw_set_halign(fa_center);
    xOffSet = 0;
} else {
   // Offset
   draw_set_halign(fa_right);
   xOffSet = 128;
}

draw_set_halign(fa_center);

for (var i = 0; i &lt; options[currentMenu]; i++) {
    if (i == currentIndex) {
       draw_set_color(c_white);
    } else {
       draw_set_color(c_ltgray);
    }
    draw_text(room_width / 2, (room_height / 2 - 96) + (48 * i), menuOption[currentMenu, i]);
    
    if (currentMenu != 0) {
       draw_set_color(c_lime);
       draw_text(room_width / 2, (room_height / 2 - 80) + (52 * i), text[currentMenu, i]);
       
    }
    
    // Enter information directly
    if (enteringText) {
        if (currentMenu == 1) {
           if (menuSelection == 0) {
              //draw_text(room_width / 2 + (string_width(menuOption[currentMenu, 0])), (room_height / 2 - 64) + (32 * menuSelection), msg + "_");
              draw_text(room_width / 2, (room_height / 2 - 80) + (52 * menuSelection), msg + "_");
           }
        } else if (currentMenu == 2) {
           if (menuSelection == 0) {
              //draw_text(room_width / 2 + (string_width(menuOption[currentMenu, 0])), (room_height / 2 - 64) + (32 * menuSelection), msg + "_");
              draw_text(room_width / 2, (room_height / 2 - 80) + (52 * menuSelection), msg + "_");
           }
           if (menuSelection == 2) {
             //draw_text(room_width / 2 + (string_width(menuOption[currentMenu, 0])), (room_height / 2 - 64) + (32 * menuSelection), msg + "_");
             draw_text(room_width / 2, (room_height / 2 - 80) + (52 * menuSelection), msg + "_");
           }
           if (menuSelection == 3) {
             //draw_text(room_width / 2 + (string_width(menuOption[currentMenu, 0])), (room_height / 2 - 64) + (32 * menuSelection), msg + "_");
             draw_text(room_width / 2, (room_height / 2 - 80) + (52 * menuSelection), msg + "_");
           }
        } else if (currentMenu == 3) {
           if (menuSelection == 0) {
             //draw_text(room_width / 2 + (string_width(menuOption[currentMenu, 0])), (room_height / 2 - 64) + (32 * menuSelection), msg + "_");
             draw_text(room_width / 2, (room_height / 2 - 80) + (52 * menuSelection), msg + "_");
           }
           if (menuSelection == 1) {
             //draw_text(room_width / 2 + (string_width(menuOption[currentMenu, 0])), (room_height / 2 - 64) + (32 * menuSelection), msg + "_");
             draw_text(room_width / 2, (room_height / 2 - 80) + (52 * menuSelection), msg + "_");
           }
        }
    }
}

// Reset alignment
draw_set_halign(fa_left);
draw_set_colour(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
