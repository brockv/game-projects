<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayerStance</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sPlayerStance</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize player variables.

// Inherit Entity
event_inherited();

/*
// Camera (later versions) ////////////////////////////////////////////////////
if (!instance_exists(oCamera))
    instance_create(x, y, oCamera);

// Set view to follow camera
view_object[0] = oCamera;

// Turn on the view
view_visible[0] = true;
    
// Initial camera position  
view_xview[0] = max(0, min(x - view_wport[0] * 0.5, room_width  - view_wport[0]));
view_yview[0] = max(0, min(y - view_hport[0] * 0.5 - 16, room_height - view_hport[0]));
*/
image_speed = 0.1;

maxHP = 100;
hp = maxHP;

/*
  keys[0] = Right key
  keys[1] = Left key
  keys[2] = Up key
  keys[3] = Down key
  keys[4] = Jump key
  keys[5] = Action1 key

*/

for (var i = 0; i &lt; 12; i++) {
    keys[i] = false;
}

// Key values
_right   = 0;
_left    = 1;
_up      = 2;
_down    = 3;
_jump    = 4;
_action1 = 5;
_action2 = 6;
_action3 = 7;
_action4 = 8;
_accept  = 9;
_cancel  = 10;
_pause   = 11;

// Movement and actions
damage      = 10;
playerSpeed = 2;
jumpHeight  = 10;
reloadTime  = 1;
isShooting  = false;
canAction1  = true;
canAction2  = true;
canAction3  = true;
canAction4  = true;
attacking   = false;

kills   = 0;
deaths  = 0;
isAlive = true;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Action1 alarm.

canAction1 = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control jumping.


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Animation reset.

isShooting = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement and gravity.

// Update audio listener position to match ours
audio_listener_position(x, y, 0);

// Handle gravity
var grav = Gravity(1);

if (grav == 0) {
   onGround = true;
} else {
   onGround = false;
}

// Movement
if (isAlive) {
    // Move the player left
    if (keys[_left] &amp;&amp; !keys[_right]) {
        if (place_free(x - playerSpeed, y)) {
           if (onGround) {
              sprite_index = sPlayerRun;
           } 
           x -= playerSpeed;
        } else {
           sprite_index = sPlayerStance;
        }
        image_xscale = -abs(image_xscale);
        
    }
    
    // Move the player right
    if (keys[_right] &amp;&amp; !keys[_left]) {
        if (place_free(x + playerSpeed, y)) {
           if (onGround) {
              sprite_index = sPlayerRun;
           }   
           x += playerSpeed;
        } else {
           sprite_index = sPlayerStance;
        }
        image_xscale = abs(image_xscale);
        
    }
    
    // Jump
    if (onGround &amp;&amp; alarm[1] &lt;= 0) {
       if (keys[_jump]) {
          vspeed -= jumpHeight;
          onGround = false;
          alarm[1] = 10;
       }
    }
    
    // Fall / Jump animations
    if (!onGround) {
         if (!isShooting) {
             if (vspeed &lt; 0) {
                sprite_index = sPlayerFall;
             } else {
                sprite_index = sPlayerJump;
             }
         } else {
            sprite_index = sPlayerAirShoot;
         }
    }
    
    // Action1
    if (canAction1) {
       if(keys[_action1]) {
          var bullet = instance_create(x, y, oBullet);
          bullet.speed = 5;
          bullet.image_xscale = image_xscale;
          var dir = 0;
          if (image_xscale &lt; 1) {
             dir = 180;
          } else {
             dir = 360;
          }
          bullet.direction = dir;
          bullet.ID = ID;
          bullet.dmg = damage;
          canAction1 = false;
          alarm[8] = room_speed * 1;
          isShooting = true;
          alarm[0] = (room_speed * 1) / 4;
          
          if (onGround) {
             sprite_index = sPlayerShoot;
          }
       }
    }
    
    
    
    
    // Idle when not moving
    if (!keys[_left] &amp;&amp; !keys[_right] &amp;&amp; !isShooting) {
       if (onGround) {
          sprite_index = sPlayerStance;
       }
    }
    
    // Idle when trying to move in two directions at once
    if (keys[_left] &amp;&amp; keys[_right]) {
       if (onGround) {
          sprite_index = sPlayerStance;
       }
    }

} else {
  sprite_index = sPlayerDead;
  
}

if (hp &lt;= 0) {
   isAlive = false;
}








</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oLizardBullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collide with bullet when friendly damage is true.


var currentID = other.ID;

if (isAlive) {
    if (ID != currentID) {
       hp -= other.dmg;
       with (other) {
          instance_destroy();
       }
       
       if (hp &lt;= 0) {
          oServer.deaths[ID]++;
          SendPlayerState(ID, false);
       }
    }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oParSolid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collide with solids.

move_contact_solid(direction, 12);
vspeed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Override draw event.

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
