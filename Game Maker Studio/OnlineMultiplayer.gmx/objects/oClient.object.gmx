<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Connect to the server.

randomize();

name = global.playerName;
socket = network_create_socket(network_socket_tcp);
buffer = buffer_create(16384, buffer_grow, 1);

global.socket = socket;

connect = network_connect(socket, global.ip, global.clientPort);

// Make sure we were able to connect to the server
if (connect != 0) {
   show_message("Could not connect to the server. # Restarting.")
   buffer_delete(buffer);
   network_destroy(socket);
   network_destroy(connect);
   game_restart();
}

//if (string_length(name) &lt; 1) {
//   name = "Player";
//}

myID = -1;
myTeamID = choose(BLUE_TEAM, RED_TEAM);
notDead  = false;
deathMSG = choose("u ded", "n00b", "king suxxorz", "RIP pepperoni", "here lies buttface");

GetServerTypeRequest();
//SpawnPlayerRequest(myTeamID, name);
//SendName(name);

// Audio variables
listenX = room_width / 2;
listenY = room_height / 2;

// Misc Server variables
serverType  = 0;
friendlyDMG = true;

// Spawning
autoRespawn = true;
firstSpawn  = true;

// Survival Mode variables
waves   = 0;
players = 0;

///////////////////////////

// Send request for network objects
//GetNetworkObjects();

objectsToDraw = ds_list_create();

_right   = 0;
_left    = 1;
_up      = 2;
_down    = 3;
_jump    = 4;
_action1 = 5;
_action2 = 6;
_action3 = 7;
_action4 = 8;
_accept  = 9;
_cancel  = 10;
_pause   = 11;

playerSpeed = 2;

// VARIABLES FOR RANKING SYSTEM


// Chat variables
senders  = ds_list_create(); // List of names
messages = ds_list_create(); // List of messages

isTyping = false;
msg = "";
maxChatMessages = 4;











</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Auto spawn alarm.

SpawnPlayerRequest(myTeamID, name);
notDead = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delete the last message.

for (var m = 0; m &lt; ds_list_size(senders); m++) {
    if (m &lt; ds_list_size(senders) - 1) {
        ds_list_replace(senders, m, ds_list_find_value(senders,m + 1)); 
        ds_list_replace(messages, m, ds_list_find_value(messages,m + 1)); 
    } else {
        ds_list_delete(senders, m); 
        ds_list_delete(messages, m); 
    }
}


alarm[1] = 2 * room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send key presses.

// Check if the client has a player in the game
if (!isTyping &amp;&amp; notDead) {
    
    // Input //
    GetPlayerInput();

    // Right //
    if (kRight) {
       SendKey(_right, true);
    }
    
    if (!kRight) {
       SendKey(_right, false);
    }
    ///////////
    
    // Left
    if (kLeft) {
       SendKey(_left, true);
    }
    
    if (!kLeft) {
       SendKey(_left, false);
    }
    ///////////
    
    // Jump
    if (kJump) {
       SendKey(_jump, true);
    }
    
    if (kJumpRelease) {
       SendKey(_jump, false);
    }
    ///////////
    
    // Action1 //
    if (kAction1) {
       SendKey(_action1, true);
    }
    
    if (!kAction1) {
       SendKey(_action1, false);
    }
    /////////////
    
    // Action2 //
    if (kAction2) {
       SendKey(_action2, true);
    }
    
    if (!kAction2) {
       SendKey(_action2, false);
    }
    /////////////
    
    // Action3 //
    if (kAction3) {
       SendKey(_action3, true);
    }
    
    if (!kAction3) {
       SendKey(_action3, false);
    }
    /////////////
    
    // Action4 //
    if (kAction4) {
       SendKey(_action4, true);
    }
    
    if (!kAction4) {
       SendKey(_action4, false);
    }
    /////////////
    
    // Accept //
    if (kAccept) {
       SendKey(_accept, true);
    }
    
    if (!kAccept) {
       SendKey(_accept, false);
    }
    /////////////
    
    // Action4 //
    if (kCancel) {
       SendKey(_cancel, true);
    }
    
    if (!kCancel) {
       SendKey(_cancel, false);
    }
    /////////////
    
    // Pause //
    if (kPause) {
       SendKey(_pause, true);
    }
    
    if (!kPause) {
       SendKey(_pause, false);
    }
    /////////////
}












</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spawn a Player


if (!notDead &amp;&amp; !isTyping) {
       if (keyboard_check_pressed(vk_f1)) {
          SpawnPlayerRequest(myTeamID, name);
          
          notDead = true;
          //firstSpawn = false;
       }
       
}


/*
if (!autoRespawn || firstSpawn) {
    if (!notDead &amp;&amp; !isTyping) {
       if (keyboard_check_pressed(vk_f1)) {
          SpawnPlayerRequest(myTeamID, name);
          
          notDead = true;
          firstSpawn = false;
       }
       
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Chat system.

if (!isTyping) {
   // Start typing
   if (keyboard_check_pressed(vk_enter)) {
      isTyping = true;
      keyboard_string = "";
      msg = "";
   }
} else {

   // Place a cap on message length
   if (string_length(keyboard_string) &lt; 25) {
      msg = keyboard_string;
   } else {
      keyboard_string = msg;
   }
   
   // Send message
   if (keyboard_check_pressed(vk_enter)) {
      // Message sent
      if (string_length(msg) &gt; 0) {
          SendChatMessage(name, msg);
          isTyping = false;
          msg = "";
          keyboard_string = "";
      // Message was empty
      } else {
         isTyping = false;
         msg = "";
         keyboard_string = "";
      }
   }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get data from the server.

var eventID = ds_map_find_value(async_load, "id");

if (eventID == socket) {
   globalvar buff;
   buff = ds_map_find_value(async_load, "buffer");
   
   var buffer_id = buffer_read(buff, buffer_u8);
   
   switch (buffer_id) {
       case (SERVERMODE):
          serverType  = buffer_read(buff, buffer_u8);
          friendlyDMG = buffer_read(buff, buffer_u8);
          waves       = buffer_read(buff, buffer_u8);
       
       break;
       
       case (MYID):
          myID = buffer_read(buff, buffer_u8);
       
       break;
       
       case (PLAYERSTATE):
            notDead = buffer_read(buff, buffer_u8);
            /*if (!notDead &amp;&amp; autoRespawn) {
               alarm[3] = 3 * room_speed;
            }*/
       
       break;
       
       case (SERVERCHAT):         
            var sendName    = buffer_read(buff, buffer_string);
            var sendMessage = buffer_read(buff, buffer_string);
            
            AddMessage(sendName, sendMessage);
            alarm[1] = 4 * room_speed;
       
       break;
       
       case (SOUND):
            var snd = buffer_read(buff, buffer_s16);
            var xx  = buffer_read(buff, buffer_s16);
            var yy  = buffer_read(buff, buffer_s16);
            
            PlaySound(snd, xx, yy);
       
       break;
       
       case (PLAYERBUFFER):
          if (serverType == SURVIVAL) {
              GetSurvivalModeData();
          }
       
       break;
       
   }
}



























</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy buffer.

ds_list_destroy(objectsToDraw);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw client stats.

draw_set_halign(fa_center);


if (!notDead) {
   draw_text(room_width / 2, room_height / 2, "PRESS F1 TO SPAWN");
}

/*
if (!notDead) {
   if (autoRespawn) {
      draw_set_halign(fa_center);
      draw_text(room_width / 2, room_height / 2, "Spawning in " + string(round(alarm[3] / room_speed)) + " seconds...");
   }
}

draw_set_halign(fa_left);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>oClient</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw chat.

draw_set_halign(fa_left);
// Show client what they are typing
if (isTyping) {
   draw_text(0, room_height - 16, "Message: ");
   draw_text(string_width("Message: "), room_height - 16, msg + "_");
} else {
   draw_text(0, room_height - 16, "[Press ENTER to chat]");
}

// Display chat messages
for (var i = 0; i &lt; ds_list_size(senders); i++) {
    var displayName = ds_list_find_value(senders, i);     
    var displayMSG  = ds_list_find_value(messages, i);
    
    // Draw senders name
    draw_set_color(c_lime);
    draw_text(0, (room_height - 98) + (20 * i), displayName + " : ");
    
    // Draw senders message
    draw_set_color(c_white);
    draw_text(0 + string_width(displayName + " : "), (room_height - 98) + (20 * i), displayMSG);
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Render objects.

RenderObjects();



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
